"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const axios_1 = __importDefault(require("axios"));
const cookies_1 = __importDefault(require("cookies"));
const retrieve_jwt = (req, res) => new Promise((resolve, reject) => {
    // Retrieving the token from either cookies or authorization header
    // NOTE: Did not need to be a promise
    let { query, headers } = req;
    let jwt;
    // See if jwt available from authorization header
    if (!jwt && (headers === null || headers === void 0 ? void 0 : headers.authorization)) {
        jwt = headers === null || headers === void 0 ? void 0 : headers.authorization.split(" ")[1];
    }
    // Try to get JWT from cookies
    if (!jwt) {
        const cookies = new cookies_1.default(req, res);
        jwt = cookies.get("jwt") || cookies.get("token");
    }
    // Try to get the JWT from query parameters
    if (!jwt) {
        jwt = query.jwt || query.token;
    }
    if (!jwt)
        return reject(`Missing JWT`);
    resolve(jwt);
});
// NOTE: Middleware itself cannot be async
const middleware = (options = {}) => (req, res, next) => {
    retrieve_jwt(req, res)
        .then((jwt) => {
        const { url } = options;
        if (!url)
            throw "URL not provided";
        res.locals.jwt = jwt;
        const headers = { Authorization: `Bearer ${jwt}` };
        return axios_1.default.get(url, { headers });
    })
        .then(({ data }) => {
        res.locals.user = data;
        next();
    })
        .catch((error) => {
        if (options.lax)
            next();
        else
            return res.status(403).send(error);
    });
};
module.exports = middleware;
